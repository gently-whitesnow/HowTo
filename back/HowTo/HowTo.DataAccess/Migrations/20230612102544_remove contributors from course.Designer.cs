// <auto-generated />
using System;
using HowTo.DataAccess.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HowTo.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230612102544_remove contributors from course")]
    partial class removecontributorsfromcourse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("HowTo.Entities.Article.ArticleDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseDtoId");

                    b.ToTable("ArticleDtos");
                });

            modelBuilder.Entity("HowTo.Entities.Contributor.ContributorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseDtoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseDtoId");

                    b.ToTable("ContributorEntityDtos");
                });

            modelBuilder.Entity("HowTo.Entities.Course.CourseDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CourseDtos");
                });

            modelBuilder.Entity("HowTo.Entities.UserInfo.UserUniqueInfoDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("LastReadCourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserUniqueInfoDtos");
                });

            modelBuilder.Entity("HowTo.Entities.ViewedEntity.ViewedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UserUniqueInfoDtoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserUniqueInfoDtoId");

                    b.ToTable("UserViewEntityDtos");
                });

            modelBuilder.Entity("HowTo.Entities.Views.UserGuid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ViewDtoArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ViewDtoCourseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ViewDtoCourseId", "ViewDtoArticleId");

                    b.ToTable("UserGuid");
                });

            modelBuilder.Entity("HowTo.Entities.Views.ViewDto", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CourseId", "ArticleId");

                    b.ToTable("ViewDtos");
                });

            modelBuilder.Entity("HowTo.Entities.Article.ArticleDto", b =>
                {
                    b.HasOne("HowTo.Entities.Contributor.ContributorEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HowTo.Entities.Course.CourseDto", null)
                        .WithMany("Articles")
                        .HasForeignKey("CourseDtoId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("HowTo.Entities.Contributor.ContributorEntity", b =>
                {
                    b.HasOne("HowTo.Entities.Course.CourseDto", null)
                        .WithMany("Contributors")
                        .HasForeignKey("CourseDtoId");
                });

            modelBuilder.Entity("HowTo.Entities.ViewedEntity.ViewedEntity", b =>
                {
                    b.HasOne("HowTo.Entities.UserInfo.UserUniqueInfoDto", null)
                        .WithMany("ApprovedViewArticleIds")
                        .HasForeignKey("UserUniqueInfoDtoId");
                });

            modelBuilder.Entity("HowTo.Entities.Views.UserGuid", b =>
                {
                    b.HasOne("HowTo.Entities.Views.ViewDto", null)
                        .WithMany("Viewers")
                        .HasForeignKey("ViewDtoCourseId", "ViewDtoArticleId");
                });

            modelBuilder.Entity("HowTo.Entities.Course.CourseDto", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Contributors");
                });

            modelBuilder.Entity("HowTo.Entities.UserInfo.UserUniqueInfoDto", b =>
                {
                    b.Navigation("ApprovedViewArticleIds");
                });

            modelBuilder.Entity("HowTo.Entities.Views.ViewDto", b =>
                {
                    b.Navigation("Viewers");
                });
#pragma warning restore 612, 618
        }
    }
}
